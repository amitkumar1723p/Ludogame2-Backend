// RoomManager ‡§ï‡•ã import ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‚Äî ‡§ú‡•ã room ‡§¨‡§®‡§æ‡§®‡•á, ‡§ú‡•ã‡§°‡§º‡§®‡•á, ‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡§æ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
import { RoomManager } from '../modals/roomModel.js';


// üîπ ‡§ú‡§¨ ‡§ï‡•ã‡§à client (player) game ‡§Æ‡•á‡§Ç connect ‡§π‡•ã‡§§‡§æ ‡§π‡•à
const joinRoom = (io, socket, { roomId, isNew, maxPlayers, PlayerName }, callback) => {

  let room;



  if (isNew) {

    // üî∏ ‡§®‡§Ø‡§æ room ‡§¨‡§®‡§æ‡§®‡§æ ‡§π‡•à ‚Äî player host ‡§π‡•ã‡§ó‡§æ
    room = RoomManager.createRoom(socket.id, maxPlayers || 4, PlayerName);
  } else {

    // üî∏ Existing room ‡§Æ‡•á‡§Ç player ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º‡§®‡§æ ‡§π‡•à
    room = RoomManager.addPlayer(roomId, socket.id, PlayerName);
    // ‡§Ö‡§ó‡§∞ room ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ ‡§Ø‡§æ full ‡§π‡•à
    if (!room) {
      return callback({ error: 'Room not found or already full' });
    }
  }

  // ‡§á‡§∏ socket ‡§ï‡•ã ‡§â‡§∏ room ‡§Æ‡•á‡§Ç officially ‡§ú‡•ã‡§°‡§º ‡§¶‡•ã
  socket.join(room.id);

  // üî∏ ‡§∏‡§≠‡•Ä players ‡§ï‡•ã room ‡§ï‡§æ latest status ‡§≠‡•á‡§ú‡•ã
  io.to(room.id).emit('roomUpdate', {
    roomId: room.id,                  // Room ID
    players: room.players,            // ‡§ï‡•å‡§®-‡§ï‡•å‡§® players ‡§π‡•à‡§Ç
    maxPlayers: room.maxPlayers       // max ‡§ï‡§ø‡§§‡§®‡•á players allowed ‡§π‡•à‡§Ç
  });

  // üî∏ Frontend ‡§ï‡•ã successful join ‡§ï‡§æ ‡§ú‡§µ‡§æ‡§¨
  callback({ success: true, room });
};






// üîπ ‡§ú‡§¨ ‡§ï‡•ã‡§à player disconnect ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§¨‡§æ‡§π‡§∞ ‡§®‡§ø‡§ï‡§≤‡§§‡§æ ‡§π‡•à
const leaveRoom = async (io, socket, { roomId }) => {
 console.log(roomId ,"roomid")
  let room = await RoomManager.getRoom(roomId);
   console.log(room ,"room")
    


  if (!room) {

    socket.emit('error', { message: 'Room not Found' });
    return
  }

  // ‡§â‡§∏ player ‡§ï‡•ã room ‡§∏‡•á remove ‡§ï‡§∞‡•ã
  let { room: RomData, RemovePlayerData } = RoomManager.removePlayer(socket.id) || {};
   console.log(RomData ,"RomData")
     
  
  if (!RomData) {
    socket.emit('error', { message: 'Room not found or empty after player left' });
    return;
  }

  // ‡§Ö‡§ó‡§∞ ‡§ï‡•á‡§µ‡§≤ 1 player ‡§¨‡§ö‡§æ ‡§π‡•à ‚Üí ‡§â‡§∏‡•á Winner ‡§¨‡§®‡§æ ‡§¶‡•ã
  if (RomData?.players?.length === 1) {
    const winnerPlayer = RomData.players[0];
    io.to(RomData.id).emit("gameOver", {
      winnerPlayer: winnerPlayer,
      message: `${winnerPlayer.PlayerName} ‡§ú‡•Ä‡§§ ‡§ó‡§Ø‡§æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§¨‡§æ‡§ï‡•Ä player ‡§®‡•á game ‡§õ‡•ã‡§°‡§º ‡§¶‡§ø‡§Ø‡§æ!`,
    });

    // Room ‡§ï‡•ã delete ‡§ï‡§∞ ‡§¶‡•ã
    RoomManager.deleteRoom(RomData.id);
    return;
  }



  const hasHost = RomData?.players?.some(p => p.host === true);
  // ‡§Ö‡§ó‡§∞ host ‡§ó‡§Ø‡§æ ‡§§‡•ã ‡§®‡§Ø‡§æ host assign ‡§ï‡§∞‡•ã
  if (!hasHost) {
    RomData.players[0].host = true;
  }

  // ‡§Ö‡§ó‡§∞ ‡§µ‡•ã ‡§ï‡§ø‡§∏‡•Ä room ‡§Æ‡•á‡§Ç ‡§•‡§æ ‡§§‡•ã ‡§∏‡§≠‡•Ä ‡§ï‡•ã ‡§¨‡§§‡§æ ‡§¶‡•ã

  // Notify all players
  io.to(RomData.id).emit('playerLeft', {
    currentPlayers: RomData.players,          // updated players list
    message: "‡§è‡§ï player game ‡§õ‡•ã‡§°‡§º ‡§ó‡§Ø‡§æ",
    removePlayer:RemovePlayerData
  });

  socket.leave(RomData.id);

};


//  Start Game 
const startGame = async (io, socket, { roomId, move }) => {
  try {
    // 1. Room data fetch karo
    const room = await RoomManager.getRoom(roomId);
    console.log(room, "startGame")
    // 2. Check karo kya players ready hain
    if (!room) {

      socket.emit('error', { message: 'Romm Avaliable nahi hai phel room crate karo' });
      return
    }
    if (room?.players?.length < 2) {
      socket.emit('error', { message: '‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 2 players ‡§ö‡§æ‡§π‡§ø‡§è!' });
      return;
    }


    // 3. Room state update karo (game started)
    // room.isGameStarted = true;
    // await RoomManager.updateRoom(roomId, { isGameStarted: true });


    // 4. Sab players ko broadcast karo
    io.to(roomId).emit('game-started', {
      players: room.players,
      roomId,
      message: 'Game ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ!',
    });


  } catch (error) {
    console.error('Error starting game:', error);
    socket.emit('error', { message: 'Game start failed!' });
  }

}



// üîπ ‡§ú‡§¨ ‡§ï‡•ã‡§à client refresh ke baad game me wapas aata hai
const rejoinRoom = (io, socket, { roomId, playerId }) => {
  // 1. Room ko fetch karo
  const room = RoomManager.getRoom(roomId);


  // 2. Agar room exist nahi karta toh error bhejo
  if (!room) {
    socket.emit('error', { message: 'Room exist nahi karta ya expire ho gaya' });
    return;
  }

  // 3. Agar player room me nahi hai, toh usse add karo
  const alreadyPresent = room.players.some(p => p.PlayerSocketId === playerId);
  if (!alreadyPresent) {
    room.players.push({ PlayerSocketId: playerId, PlayerName: "Rejoined" });
  }


  // 4. Current socket ko room me join karwao (socket.io ka join)
  socket.join(roomId);

  // 5. Room ka latest status sabko emit karo
  io.to(roomId).emit('roomUpdate', {
    roomId: room.id,
    players: room.players,
    maxPlayers: room.maxPlayers
  });

  // // 6. Agar game already start ho chuka hai (moves exist karein)
  // if (room.moves.length > 0) {
  //   socket.emit('game-started', {
  //     players: room.players,
  //     roomId: room.id,
  //     message: 'Game already chalu hai ‚Äî reconnect ho gaya!',
  //   });
  // }


};



const diceRolled = (io, socket, { roomId, playerNo, PlayerSocketId, diceNo }) => {



  const room = RoomManager.getRoom(roomId);   // ‡§â‡§∏ room ‡§ï‡•ã find ‡§ï‡§∞‡•ã

  if (!room) {

    socket.emit('error', { message: 'Room not Found restart game again' });
    return;
  }

  // // ‚úÖ Broadcast dice number to all players in room
  // io.to(roomId).emit('diceRolled', {
  //   playerNo,    // Position (e.g. 1 or 2)
  //   diceNo  ,  // Rolled dice number
  //   PlayerSocketId
  // });

  // ‚úÖ Broadcast dice rolling animation first
  io.to(roomId).emit('diceRolling', {
    playerNo,
    PlayerSocketId
  });
  // Then after 1 second delay, send diceRolled with value
  setTimeout(() => {
    io.to(roomId).emit('diceRolled', {
      playerNo,    // Position (e.g. 1 or 2)
      diceNo,      // Rolled dice number
      PlayerSocketId
    });
  }, 1000);
};





// üîÑ Add new: Handle nextTurn update from frontend
const updateNextTurn = (io, socket, { roomId, chancePlayer }) => {

  const room = RoomManager.getRoom(roomId);
  if (!room) {
    socket.emit('error', { message: 'Room not found for nextTurn:' });

    return;
  }

  const index = room.players.findIndex(p => p.position === chancePlayer);
  if (index === -1) {
    console.log(`‚ùå Player with position ${chancePlayer} not found in room ${roomId}`);
    return;
  }

  // room.currentTurnIndex = index;

  // üì¢ Notify all players
  io.to(roomId).emit('nextTurn', {
    chancePlayer
  });
};

const enablePileSelection = (io, socket, { roomId, playerNo }) => {

  const room = RoomManager.getRoom(roomId);
  if (!room) {
    socket.emit('error', { message: 'Room not found for enablePileSelection:' });
    return;
  }





  // üì¢ Notify all players
  io.to(roomId).emit('enablePileSelection', {
    playerNo
  });
};
const enableCellSelection = (io, socket, { roomId, playerNo }) => {

  const room = RoomManager.getRoom(roomId);
  if (!room) {
    socket.emit('error', { message: 'Room not found for enableCellSelection' });

    return;
  }

  // üì¢ Notify all players
  io.to(roomId).emit('enableCellSelection', {
    playerNo
  });
};
const pileEnableFromPocket = (io, socket, { roomId, playerNo, pieceId, pos, travelCount }) => {

  const room = RoomManager.getRoom(roomId);
  if (!room) {
    socket.emit('error', { message: 'Room not found for pileEnableFromPocket:' });
    return;
  }

  io.to(roomId).emit('PileEnableFromPocket', {
    playerNo, pieceId, pos, travelCount
  });


}
const handleForwardThunk = (io, socket, { roomId, playerNo, pieceId, id }) => {

  const room = RoomManager.getRoom(roomId);
  if (!room) {
    socket.emit('error', { message: 'Room not found for handleForwardThunk:' });

    return;
  }

  io.to(roomId).emit('handleForwardThunk', {
    playerNo, pieceId, id
  });

}


// üîö ‡§¨‡§æ‡§ï‡•Ä files ‡§∏‡•á import ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è export ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç
export { joinRoom, leaveRoom, startGame, rejoinRoom, diceRolled, updateNextTurn, enablePileSelection, enableCellSelection, pileEnableFromPocket, handleForwardThunk };
