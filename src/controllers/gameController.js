// RoomManager ‡§ï‡•ã import ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‚Äî ‡§ú‡•ã room ‡§¨‡§®‡§æ‡§®‡•á, ‡§ú‡•ã‡§°‡§º‡§®‡•á, ‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡§æ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
import { RoomManager } from '../modals/roomModel.js';


// üîπ ‡§ú‡§¨ ‡§ï‡•ã‡§à client (player) game ‡§Æ‡•á‡§Ç connect ‡§π‡•ã‡§§‡§æ ‡§π‡•à
const joinRoom = (io, socket, { roomId, isNew, maxPlayers, PlayerName }, callback) => {

  let room;
  console.log("Join Room Data start")
  console.log("roomId", roomId)
  console.log("isNew", isNew)
  console.log("maxPlayers", maxPlayers)
  console.log("Join Room Data end")


  if (isNew) {

    // üî∏ ‡§®‡§Ø‡§æ room ‡§¨‡§®‡§æ‡§®‡§æ ‡§π‡•à ‚Äî player host ‡§π‡•ã‡§ó‡§æ
    room = RoomManager.createRoom(socket.id, maxPlayers || 4, PlayerName);
    console.log(room, "new Room Create ho gya hai")
  } else {
    // üî∏ Existing room ‡§Æ‡•á‡§Ç player ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º‡§®‡§æ ‡§π‡•à
    room = RoomManager.addPlayer(roomId, socket.id, PlayerName);

    console.log(room, "Romm mai koi Join huva hai")
    // ‡§Ö‡§ó‡§∞ room ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ ‡§Ø‡§æ full ‡§π‡•à
    if (!room) {
      return callback({ error: 'Room not found or already full' });
    }
  }

  // ‡§á‡§∏ socket ‡§ï‡•ã ‡§â‡§∏ room ‡§Æ‡•á‡§Ç officially ‡§ú‡•ã‡§°‡§º ‡§¶‡•ã
  socket.join(room.id);

  // üî∏ ‡§∏‡§≠‡•Ä players ‡§ï‡•ã room ‡§ï‡§æ latest status ‡§≠‡•á‡§ú‡•ã
  io.to(room.id).emit('roomUpdate', {
    roomId: room.id,                  // Room ID
    players: room.players,            // ‡§ï‡•å‡§®-‡§ï‡•å‡§® players ‡§π‡•à‡§Ç
    currentTurn: room.currentTurn,    // ‡§Ö‡§≠‡•Ä ‡§ï‡§ø‡§∏‡§ï‡•Ä turn ‡§π‡•à
    maxPlayers: room.maxPlayers       // max ‡§ï‡§ø‡§§‡§®‡•á players allowed ‡§π‡•à‡§Ç
  });

  // üî∏ Frontend ‡§ï‡•ã successful join ‡§ï‡§æ ‡§ú‡§µ‡§æ‡§¨
  callback({ success: true, roomId: room.id });
};



// üîπ ‡§ú‡§¨ ‡§ï‡•ã‡§à player move ‡§ï‡§∞‡§§‡§æ ‡§π‡•à (‡§ú‡•à‡§∏‡•á dice ‡§ö‡§≤‡§æ‡§®‡§æ, piece move ‡§ï‡§∞‡§®‡§æ etc.)
const handleMove = (io, socket, { roomId, move }) => {
  const room = RoomManager.getRoom(roomId);   // ‡§â‡§∏ room ‡§ï‡•ã find ‡§ï‡§∞‡•ã
  if (!room) return;                          // ‡§Ö‡§ó‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ, ‡§§‡•ã ignore ‡§ï‡§∞‡•ã

  // üî∏ ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§µ‡§π‡•Ä player move ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à ‡§ú‡§ø‡§∏‡§ï‡§æ turn ‡§π‡•à
  if (socket.id !== room.currentTurn) return;

  // üî∏ move ‡§ï‡•ã history ‡§Æ‡•á‡§Ç add ‡§ï‡§∞‡•ã (‡§ï‡•å‡§® player ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡§æ move)
  room.moves.push({ by: socket.id, move });

  // üî∏ ‡§∏‡§≠‡•Ä players ‡§ï‡•ã ‡§Ø‡§π move ‡§¨‡§§‡§æ ‡§¶‡•ã
  io.to(room.id).emit('moveMade', {
    by: socket.id,          // ‡§ï‡§ø‡§∏‡§®‡•á move ‡§ï‡§ø‡§Ø‡§æ
    move,                   // ‡§ï‡•ç‡§Ø‡§æ move ‡§ï‡§ø‡§Ø‡§æ
    moves: room.moves       // ‡§™‡•Ç‡§∞‡•Ä move history
  });

  // üî∏ turn ‡§Ö‡§¨ ‡§Ö‡§ó‡§≤‡•á player ‡§ï‡•ã ‡§¶‡•á ‡§¶‡•ã
  room.advanceTurn();

  // üî∏ ‡§∏‡§≠‡•Ä players ‡§ï‡•ã ‡§¨‡§§‡§æ‡§ì ‡§ï‡§ø ‡§Ö‡§¨ ‡§ï‡§ø‡§∏‡§ï‡•Ä turn ‡§π‡•à
  io.to(room.id).emit('turnUpdate', {
    currentTurn: room.currentTurn
  });
};



// üîπ ‡§ú‡§¨ ‡§ï‡•ã‡§à player disconnect ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§¨‡§æ‡§π‡§∞ ‡§®‡§ø‡§ï‡§≤‡§§‡§æ ‡§π‡•à
const leaveRoom = (io, socket) => {
  // ‡§â‡§∏ player ‡§ï‡•ã room ‡§∏‡•á remove ‡§ï‡§∞‡•ã
  const room = RoomManager.removePlayer(socket.id);

  // ‡§Ö‡§ó‡§∞ ‡§µ‡•ã ‡§ï‡§ø‡§∏‡•Ä room ‡§Æ‡•á‡§Ç ‡§•‡§æ ‡§§‡•ã ‡§∏‡§≠‡•Ä ‡§ï‡•ã ‡§¨‡§§‡§æ ‡§¶‡•ã
  if (room) {
    io.to(room.id).emit('playerLeft', {
      players: room.players,          // updated players list
      currentTurn: room.currentTurn   // ‡§Ö‡§¨ ‡§ï‡§ø‡§∏‡§ï‡•Ä turn ‡§π‡•à
    });
  }
};


//  Start Game 
const startGame = async (io, socket, { roomId, move }) => {
  try {
    // 1. Room data fetch karo
    const room = await RoomManager.getRoom(roomId);
    console.log(room, "room")
    // 2. Check karo kya players ready hain
    if (!room) {

      socket.emit('error', { message: 'Romm Avaliable nahi hai phel room crate karo' });
      return
    }
    if (room?.players?.length < 2) {
      socket.emit('error', { message: '‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 2 players ‡§ö‡§æ‡§π‡§ø‡§è!' });
      return;
    }


    // 3. Room state update karo (game started)
    // room.isGameStarted = true;
    // await RoomManager.updateRoom(roomId, { isGameStarted: true });

    console.log(room, "aab game start Hogya hai")
    // 4. Sab players ko broadcast karo
    io.to(roomId).emit('game-started', {
      players: room.players,
      roomId,
      message: 'Game ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ!',
    });
    console.log(`Game started in room ${roomId}`);

  } catch (error) {
    console.error('Error starting game:', error);
    socket.emit('error', { message: 'Game start failed!' });
  }

}



// üîπ ‡§ú‡§¨ ‡§ï‡•ã‡§à client refresh ke baad game me wapas aata hai
const rejoinRoom = (io, socket, { roomId, playerId }) => {
  // 1. Room ko fetch karo
  const room = RoomManager.getRoom(roomId);

  // 2. Agar room exist nahi karta toh error bhejo
  if (!room) {
    socket.emit('error', { message: 'Room exist nahi karta ya expire ho gaya' });
    return;
  }

  // 3. Agar player room me nahi hai, toh usse add karo
  const alreadyPresent = room.players.some(p => p.PlayerSoketId === playerId);
  if (!alreadyPresent) {
    room.players.push({ PlayerSoketId: playerId, PlayerName: "Rejoined" });
  }


  // 4. Current socket ko room me join karwao (socket.io ka join)
  socket.join(roomId);

  // 5. Room ka latest status sabko emit karo
  io.to(roomId).emit('roomUpdate', {
    roomId: room.id,
    players: room.players,
    currentTurn: room.currentTurn,
    maxPlayers: room.maxPlayers
  });

  // 6. Agar game already start ho chuka hai (moves exist karein)
  if (room.moves.length > 0) {
    socket.emit('game-started', {
      players: room.players,
      roomId: room.id,
      message: 'Game already chalu hai ‚Äî reconnect ho gaya!',
    });
  }

  console.log(`üîÅ Player ${playerId} rejoined room ${roomId}`);
};



const diceRolled = (io, socket, { roomId, playerNo,   PlayerSoketId,diceNo }) => {

        console.log(`üé≤ Player ${playerNo} rolled dice = ${diceNo} in room ${roomId}`);

    const room = RoomManager.getRoom(roomId);   // ‡§â‡§∏ room ‡§ï‡•ã find ‡§ï‡§∞‡•ã
      if (!room) {
        console.log('‚ùå Room not found:', roomId);
        return;
      }

      // ‚úÖ Broadcast dice number to all players in room
      io.to(roomId).emit('diceRolled', {
        playerNo,    // Position (e.g. 1 or 2)
        diceNo  ,  // Rolled dice number
        PlayerSoketId
      });
}

// üîö ‡§¨‡§æ‡§ï‡•Ä files ‡§∏‡•á import ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è export ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç
export { joinRoom, handleMove, leaveRoom, startGame, rejoinRoom };
