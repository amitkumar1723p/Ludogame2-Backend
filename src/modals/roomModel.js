// рдПрдХ Room class рдмрдирд╛рддреЗ рд╣реИрдВ тАФ рдЬреЛ рд╣рд░ рдЧреЗрдо рд░реВрдо рдХреЛ represent рдХрд░рддрд╛ рд╣реИ
class Room {
  constructor(hostSocketId, maxPlayers = 4 ,PlayerName) {
    // ЁЯФ╣ Random ID generate рдХрд┐рдпрд╛ рдЧрдпрд╛ room рдХреЗ рд▓рд┐рдП (UUID рдХреА рдЬрдЧрд╣ simple ID)
    this.id = Math.random().toString(36).substr(2, 8);

    // ЁЯФ╣ Players list рдореЗрдВ рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ host рдЬреБрдбрд╝рддрд╛ рд╣реИ
    this.players = [{PlayerSocketId:hostSocketId ,PlayerName ,host:true ,position: 1 }];

    // ЁЯФ╣ Room рдореЗрдВ рдХрд┐рддрдиреЗ players allowed рд╣реИрдВ (default: 4)
    this.maxPlayers = maxPlayers;

    // ЁЯФ╣ рдЕрднреА рдХрд┐рд╕рдХреА turn рд╣реИ тАФ рдЙрд╕рдХрд╛ index track рдХрд░ рд░рд╣реЗ рд╣реИрдВ
    // this.currentTurnIndex = 0;

    // ЁЯФ╣ рдЕрдм рддрдХ рдХреЗ рд╕рднреА moves рдХреЛ track рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП list
    // this.moves = [];
    
     
      
  }

 
  
}

// ЁЯФ╣ Global object тАФ рд╕рднреА active game rooms рдпрд╣рд╛рдБ store рд╣реЛрдВрдЧреЗ
const rooms = {};
  console.log(rooms ,"Print  Globally Room")

// ЁЯФ╕ RoomManager: рд╕рд╛рд░реЗ room рд╕реЗ рдЬреБрдбрд╝рд╛ logic рдФрд░ handling рдХрд░реЗрдЧрд╛
class RoomManager {
  // тЬЕ рдирдпрд╛ room create рдХрд░реЛ
  static createRoom(hostId, maxPlayers , PlayerName) {
     
    const room = new Room(hostId, maxPlayers ,PlayerName); // рдирдпрд╛ room instance
    rooms[room.id] = room;                     // rooms map рдореЗрдВ рдбрд╛рд▓ рджреЛ
    return room;
  }

  // тЬЕ Existing room рдореЗрдВ player рдХреЛ рдЬреЛрдбрд╝реЛ
  static addPlayer(roomId, playerId ,PlayerName) {
    const room = rooms[roomId];               // room ID рд╕реЗ room рдЦреЛрдЬреЛ
    if (!room) return null;                   // рдЕрдЧрд░ рдирд╣реАрдВ рдорд┐рд▓рд╛, null рднреЗрдЬреЛ

    if (room.players.length >= room.maxPlayers) return null; // room full
  const nextPosition = room.players.length + 1;  // тЬЕ Automatically 2, 3, 4...
    room.players.push({ PlayerSocketId: playerId, PlayerName, host:false  ,   position: nextPosition});              // player рдХреЛ рдЬреЛрдбрд╝реЛ
    return room;
  }

  // тЬЕ room ID рд╕реЗ рдкреВрд░рд╛ room object рд╡рд╛рдкрд┐рд╕ рджреЛ
  static getRoom(roomId) {
    return rooms[roomId];
  }
  
  //  Abi is ki jarurat nahi hai 
  // тЬЕ рдЕрдЧрд░ рдХреЛрдИ player leave рдХрд░рддрд╛ рд╣реИ, рддреЛ handle рдХрд░реЛ
static removePlayer(playerId) {
  for (const roomId in rooms) {
    const room = rooms[roomId];
    const idx = room.players.findIndex(p => p.PlayerSocketId === playerId); // тЬЕ Change

    if (idx > -1) {
   let [RemovePlayerData]=   room.players.splice(idx, 1); // тЬЕ Remove player
      return {room ,RemovePlayerData};
    }
  }

  return null;
}



 static  deleteRoom(roomId){
      if (rooms[roomId]) {
    delete rooms[roomId];
    console.log(`ЁЯЧСя╕П Room deleted: ${roomId}`);
  }
 }
}

// ЁЯФЪ RoomManager рдХреЛ export рдХрд░ рд░рд╣реЗ рд╣реИрдВ тАФ рддрд╛рдХрд┐ controller рдореЗрдВ use рд╣реЛ рд╕рдХреЗ
export { RoomManager };
